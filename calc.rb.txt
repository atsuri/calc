require 'strscan'
class Calc
    def initialize
        begin
            @formula = ARGV[0]
            # puts @formula
        rescue
            puts "計算式がありません。"
        end
        @scanner = StringScanner.new(@formula.chomp)
        # puts scanner

        @keywords = {
            '+' => :add,
            '-' => :sub,
            '*' => :mul,
            '/' => :div,
            '(' => :left_parn,
            ')' => :right_parn
        }

        p eval(parse()) #結果を出力
    end

    # ソースコードの先頭から、次のtokenを一つ切り出して返す。
    def get_token()
        if scan = @scanner.scan(/\A\d+/) then #数値だったら
            # p "数値：#{scan}"
            return scan.to_f
        elsif scan = @scanner.scan(/[\+\-\*\/()]/) then # 予約語だったら
            # p "予約語：#{@keywords[scan]}"
            return @keywords[scan]
        end
    end

    # tokenを受け取り、ソースコードの先頭にそれを押し戻す。
    def unget_token()
        if !(@scanner.eos?) then
            @scanner.unscan
        end
    end

    # 式
    def expression()
        result = term()
        token = get_token()
        while token == :add or token == :sub
            result = [token, result, term()]
            token = get_token()
        end
        unget_token()
        p result
        return result
    end

    def term()
        result = factor()
        token = get_token()
        while token == :mul or token == :div
            result = [token, result, factor()]
            token = get_token()
        end

        unget_token()
        return result
    end

    def factor()
        token = get_token()
        if token.is_a?(Float) then# 数字だったら
            result = token
        elsif token == :get then# 標準入力だったら
            result = token
        elsif token.is_a?(String) then# 数字だったら
            result = [:variable, token]
        elsif token == :left_parn then#（ だったら
            result = expression()
            token = get_token() # 閉じカッコを取り除く(使用しない)
            if token != :right_parn then# ) なかったら
                raise Exception, "構文エラー"
            else
                # p token
            end
        end

        return result
    end

    def eval(exp)
        if exp.instance_of?(Array)
            case exp[0]
            when :add
                begin
                    return eval(exp[1]) + eval(exp[2])
                rescue => e
                    puts "加算でエラー：#{e.message}"
                end
            when :sub
                begin
                    return eval(exp[1]) - eval(exp[2])
                rescue => e
                    puts "減算でエラー：#{e.message}"
                end
            when :mul
                begin
                    return eval(exp[1]) * eval(exp[2])
                rescue => e
                    puts "乗算でエラー：#{e.message}"
                end
            when :div
                begin
                    return eval(exp[1]) / eval(exp[2])
                rescue => e
                    puts "除算でエラー：#{e.message}"
                end
            end
        else
            return exp
        end
    end

    def parse()
        expression()
    end
end

Calc.new


###################################
% ruby calc.rb "1+2*3-4"
[:sub, [:add, 1.0, [:mul, 2.0, 3.0]], 4.0]
3.0

% ruby calc.rb "(1+2)*3-4"
[:add, 1.0, 2.0]
[:sub, [:mul, [:add, 1.0, 2.0], 3.0], 4.0]
5.0

% ruby calc.rb "10*2+3-4/5"
[:sub, [:add, [:mul, 10.0, 2.0], 3.0], [:div, 4.0, 5.0]]
22.2

% ruby calc.rb "(5+2)*10/5-6"
[:add, 5.0, 2.0]
[:sub, [:div, [:mul, [:add, 5.0, 2.0], 10.0], 5.0], 6.0]
8.0